(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1058],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return m},kt:function(){return u}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},m=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),p=l(t),u=o,f=p["".concat(c,".").concat(u)]||p[u]||d[u]||a;return t?r.createElement(f,s(s({ref:n},m),{},{components:t})):r.createElement(f,s({ref:n},m))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=p;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5633:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return i},metadata:function(){return c},toc:function(){return l},default:function(){return d}});var r=t(2122),o=t(9756),a=(t(7294),t(3905)),s=["components"],i={sidebar_position:4},c={unversionedId:"learn/simple-option/testing",id:"learn/simple-option/testing",isDocsHomePage:!1,title:"Testing",description:"At this point your code should be compiling, although we did not test if it works.",source:"@site/docs/learn/simple-option/testing.md",sourceDirName:"learn/simple-option",slug:"/learn/simple-option/testing",permalink:"/docs/0.14/learn/simple-option/testing",editUrl:"https://github.com/CosmWasm/docs/edit/master/docs/learn/simple-option/testing.md",version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"defaultSidebar",previous:{title:"Develop Contract",permalink:"/docs/0.14/learn/simple-option/develop"},next:{title:"Next Steps",permalink:"/docs/0.14/learn/simple-option/next-steps"}},l=[{value:"Test Initialization",id:"test-initialization",children:[{value:"Mock Dependencies, Environment, and Message Info",id:"mock-dependencies-environment-and-message-info",children:[]}]},{value:"Test Handler",id:"test-handler",children:[{value:"Test Transfer Handler",id:"test-transfer-handler",children:[]},{value:"Test Execute",id:"test-execute",children:[]}]}],m={toc:l};function d(e){var n=e.components,t=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("iframe",{src:"https://player.vimeo.com/video/457705991",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen",allowfullscreen:!0}),(0,a.kt)("p",null,"At this point your code should be compiling, although we did not test if it works.\nYou can deploy the code to the chain everytime when you make a change. But come on, your time is more valuable than that.\nAlso, good to keep the contract break-free and tested for future changes."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[cfg(test)]\nmod tests {\n    use super::*;\n    use cosmwasm_std::testing::{mock_dependencies, mock_env, mock_info, MOCK_CONTRACT_ADDR};\n    use cosmwasm_std::{attr, coins, CosmosMsg};\n")),(0,a.kt)("p",null,"This is how testing in Rust begins. ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/CosmWasm/cosmwasm-examples/blob/master/simple-option/src/contract.rs"},"Code reference"),".\nYou can keep test and code in the same or separate files."),(0,a.kt)("h2",{id:"test-initialization"},"Test Initialization"),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Timecode ",(0,a.kt)("a",{parentName:"p",href:"https://vimeo.com/457705991#t=3m34s"},"https://vimeo.com/457705991#t=3m34s")))),(0,a.kt)("p",null,"For each test, test specific variables such as block time, state must be mocked. Write a function for easy setup."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'#[test]\nfn proper_initialization() {\n    let mut deps = mock_dependencies(&[]);\n\n    let msg = InitMsg {\n        counter_offer: coins(40, "ETH"),\n        expires: 100_000,\n    };\n    let info = mock_info("creator", &coins(1, "BTC"));\n\n    // we can just call .unwrap() to assert this was a success\n    let res = init(deps.as_mut(), mock_env(), info, msg).unwrap();\n    assert_eq!(0, res.messages.len());\n\n    // it worked, let\'s query the state\n    let res = query_config(deps.as_ref()).unwrap();\n    assert_eq!(100_000, res.expires);\n    assert_eq!("creator", res.owner.as_str());\n    assert_eq!("creator", res.creator.as_str());\n    assert_eq!(coins(1, "BTC"), res.collateral);\n    assert_eq!(coins(40, "ETH"), res.counter_offer);\n}\n')),(0,a.kt)("p",null,"Good we now have a test environment initializer. This is a very simple one, you can pass in variables to the function and do different tweaks.\nCheck cosmwasm-plus for more."),(0,a.kt)("h3",{id:"mock-dependencies-environment-and-message-info"},"Mock Dependencies, Environment, and Message Info"),(0,a.kt)("p",null,"There are two three mocking tools we should improve on:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"/// All external requirements that can be injected for unit tests.\n/// It sets the given balance for the contract itself, nothing else\npub fn mock_dependencies(\n    contract_balance: &[Coin],\n) -> OwnedDeps<MockStorage, MockApi, MockQuerier> {\n    let contract_addr = HumanAddr::from(MOCK_CONTRACT_ADDR);\n    OwnedDeps {\n        storage: MockStorage::default(),\n        api: MockApi::default(),\n        querier: MockQuerier::new(&[(&contract_addr, contract_balance)]),\n    }\n}\n")),(0,a.kt)("p",null,"This sets up dependencies for testing such as storage, api, and querier."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'/// Returns a default enviroment with height, time, chain_id, and contract address\n/// You can submit as is to most contracts, or modify height/time if you want to\n/// test for expiration.\n///\n/// This is intended for use in test code only.\npub fn mock_env() -> Env {\n    Env {\n        block: BlockInfo {\n            height: 12_345,\n            time: 1_571_797_419,\n            time_nanos: 879305533,\n            chain_id: "cosmos-testnet-14002".to_string(),\n        },\n        contract: ContractInfo {\n            address: HumanAddr::from(MOCK_CONTRACT_ADDR),\n        },\n    }\n}\n')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"mock_env")," is for mocking block, and contract environment."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"/// Just set sender and sent funds for the message. The essential for\n/// This is intended for use in test code only.\npub fn mock_info<U: Into<HumanAddr>>(sender: U, sent: &[Coin]) -> MessageInfo {\n    MessageInfo {\n        sender: sender.into(),\n        sent_funds: sent.to_vec(),\n    }\n}\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"mock_info")," is for mocking transaction environment."),(0,a.kt)("h2",{id:"test-handler"},"Test Handler"),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Timecode ",(0,a.kt)("a",{parentName:"p",href:"https://vimeo.com/457705991#t=7m34s"},"https://vimeo.com/457705991#t=7m34s")))),(0,a.kt)("h3",{id:"test-transfer-handler"},"Test Transfer Handler"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'#[test]\nfn transfer() {\n    let mut deps = mock_dependencies(&[]);\n\n    let msg = InitMsg {\n        counter_offer: coins(40, "ETH"),\n        expires: 100_000,\n    };\n    let info = mock_info("creator", &coins(1, "BTC"));\n\n    // we can just call .unwrap() to assert this was a success\n    let res = init(deps.as_mut(), mock_env(), info, msg).unwrap();\n    assert_eq!(0, res.messages.len());\n\n    // random cannot transfer\n    let info = mock_info("anyone", &[]);\n    let err = handle_transfer(deps.as_mut(), mock_env(), info, HumanAddr::from("anyone"))\n        .unwrap_err();\n    match err {\n        ContractError::Unauthorized {} => {}\n        e => panic!("unexpected error: {}", e),\n    }\n\n    // owner can transfer\n    let info = mock_info("creator", &[]);\n    let res =\n        handle_transfer(deps.as_mut(), mock_env(), info, HumanAddr::from("someone")).unwrap();\n    assert_eq!(res.attributes.len(), 2);\n    assert_eq!(res.attributes[0], attr("action", "transfer"));\n\n    // check updated properly\n    let res = query_config(deps.as_ref()).unwrap();\n    assert_eq!("someone", res.owner.as_str());\n    assert_eq!("creator", res.creator.as_str());\n}\n')),(0,a.kt)("h3",{id:"test-execute"},"Test Execute"),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Timecode ",(0,a.kt)("a",{parentName:"p",href:"https://vimeo.com/457705991#t=14m21s"},"https://vimeo.com/457705991#t=14m21s")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'#[test]\nfn execute() {\n    let mut deps = mock_dependencies(&[]);\n\n    let amount = coins(40, "ETH");\n    let collateral = coins(1, "BTC");\n    let expires = 100_000;\n    let msg = InitMsg {\n        counter_offer: amount.clone(),\n        expires: expires,\n    };\n    let info = mock_info("creator", &collateral);\n\n    // we can just call .unwrap() to assert this was a success\n    let _ = init(deps.as_mut(), mock_env(), info, msg).unwrap();\n\n    // set new owner\n    let info = mock_info("creator", &[]);\n    let _ = handle_transfer(deps.as_mut(), mock_env(), info, HumanAddr::from("owner")).unwrap();\n\n    // random cannot execute\n    let info = mock_info("creator", &amount);\n    let err = handle_execute(deps.as_mut(), mock_env(), info).unwrap_err();\n    match err {\n        ContractError::Unauthorized {} => {}\n        e => panic!("unexpected error: {}", e),\n    }\n\n    // expired cannot execute\n    let info = mock_info("owner", &amount);\n    let mut env = mock_env();\n    env.block.height = 200_000;\n    let err = handle_execute(deps.as_mut(), env, info).unwrap_err();\n    match err {\n        ContractError::OptionExpired { expired } => assert_eq!(expired, expires),\n        e => panic!("unexpected error: {}", e),\n    }\n\n    // bad counter_offer cannot execute\n    let msg_offer = coins(39, "ETH");\n    let info = mock_info("owner", &msg_offer);\n    let err = handle_execute(deps.as_mut(), mock_env(), info).unwrap_err();\n    match err {\n        ContractError::CounterOfferMismatch {\n            offer,\n            counter_offer,\n        } => {\n            assert_eq!(msg_offer, offer);\n            assert_eq!(amount, counter_offer);\n        }\n        e => panic!("unexpected error: {}", e),\n    }\n\n    // proper execution\n    let info = mock_info("owner", &amount);\n    let res = handle_execute(deps.as_mut(), mock_env(), info).unwrap();\n    assert_eq!(res.messages.len(), 2);\n    assert_eq!(\n        res.messages[0],\n        CosmosMsg::Bank(BankMsg::Send {\n            from_address: MOCK_CONTRACT_ADDR.into(),\n            to_address: "creator".into(),\n            amount,\n        })\n    );\n    assert_eq!(\n        res.messages[1],\n        CosmosMsg::Bank(BankMsg::Send {\n            from_address: MOCK_CONTRACT_ADDR.into(),\n            to_address: "owner".into(),\n            amount: collateral,\n        })\n    );\n\n    // check deleted\n    let _ = query_config(deps.as_ref()).unwrap_err();\n}\n')),(0,a.kt)("p",null,"Now run the tests:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"cargo test\n")),(0,a.kt)("p",null,"If all green, the code will run work on chain."))}d.isMDXComponent=!0}}]);