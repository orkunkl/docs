(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7724],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(n),d=o,g=m["".concat(c,".").concat(d)]||m[d]||u[d]||a;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3835:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return c},toc:function(){return l},default:function(){return u}});var r=n(2122),o=n(9756),a=(n(7294),n(3905)),i=["components"],s={sidebar_position:4},c={unversionedId:"getting-started/compile-contract",id:"getting-started/compile-contract",isDocsHomePage:!1,title:"Downloading and Compiling Contract",description:"In this section, we will download a sample contract, compile to it to wasm binary executable.",source:"@site/docs/getting-started/compile-contract.md",sourceDirName:"getting-started",slug:"/getting-started/compile-contract",permalink:"/0.14/getting-started/compile-contract",editUrl:"https://github.com/CosmWasm/docs/edit/master/docs/getting-started/compile-contract.md",version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"defaultSidebar",previous:{title:"Setting Up Environment",permalink:"/0.14/getting-started/setting-env"},next:{title:"Uploading and Interacting",permalink:"/0.14/getting-started/interact-with-contract"}},l=[{value:"Compiling and Testing Contract",id:"compiling-and-testing-contract",children:[]},{value:"Unit Tests",id:"unit-tests",children:[]},{value:"Optimized Compilation",id:"optimized-compilation",children:[]}],p={toc:l};function u(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In this section, we will download a sample contract, compile to it to wasm binary executable."),(0,a.kt)("p",null,"Please first review the ",(0,a.kt)("a",{parentName:"p",href:"/0.14/getting-started/setting-env"},"client setup instructions"),", and configure and verify a\nclient, either Go CLI or Node.js console."),(0,a.kt)("h2",{id:"compiling-and-testing-contract"},"Compiling and Testing Contract"),(0,a.kt)("p",null,"Let's download the repo in which we collect\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/CosmWasm/cosmwasm-examples"},(0,a.kt)("inlineCode",{parentName:"a"},"cosmwasm-examples"))," and try out an existing simple\nescrow contract that can hold some native tokens and gives the power to an arbiter to release them\nto a pre-defined beneficiary. First, clone the repo and try to build the wasm bundle:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"# get the code\ngit clone https://github.com/CosmWasm/cosmwasm-examples\ncd cosmwasm-examples\ngit fetch --tags\ngit checkout escrow-0.10.0\ncd escrow\n\n# compile the wasm contract with stable toolchain\nrustup default stable\ncargo wasm\n")),(0,a.kt)("p",null,"After this compiles, it should produce a file in\n",(0,a.kt)("inlineCode",{parentName:"p"},"target/wasm32-unknown-unknown/release/cw_escrow.wasm"),". A quick ",(0,a.kt)("inlineCode",{parentName:"p"},"ls -l")," should show around 2MB. This\nis a release build, but not stripped of all unneeded code. To produce a much smaller version, you\ncan run this which tells the compiler to strip all unused code out:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"RUSTFLAGS='-C link-arg=-s' cargo wasm\n")),(0,a.kt)("p",null,"This produces a file about 174kB. We use this and another optimizer in the next ",(0,a.kt)("a",{parentName:"p",href:"#optimized-compilation"},"last section")," to produce the final product uploaded to the blockchain. You don't need to worry about running this yourself (unless you are\ncurious), but you should have an idea of the final size of your contract this way."),(0,a.kt)("h2",{id:"unit-tests"},"Unit Tests"),(0,a.kt)("p",null,"Let's try running the unit tests:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"RUST_BACKTRACE=1 cargo unit-test\n")),(0,a.kt)("p",null,"After some compilation steps, you should see:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"running 5 tests\ntest contract::tests::cannot_initialize_expired ... ok\ntest contract::tests::proper_initialization ... ok\ntest contract::tests::init_and_query ... ok\ntest contract::tests::handle_refund ... ok\ntest contract::tests::handle_approve ... ok\n\ntest result: ok. 5 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"RUST_BACKTRACE=1")," will provide you with full stack traces on any error, which is super useful. This\nonly works for unit tests (which test native rust code, not the compiled wasm). Also, if you want to\nknow where ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo wasm")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo unit-test")," come from, they are just aliases defined in\n",(0,a.kt)("inlineCode",{parentName:"p"},".cargo/config"),". Take a look there to understand the cargo flags more."),(0,a.kt)("h2",{id:"optimized-compilation"},"Optimized Compilation"),(0,a.kt)("p",null,"Smart contract binary size must be as small as possible for reduced gas cost. This will not only cost\nless on deployment, also for every single interaction. Simply, ",(0,a.kt)("strong",{parentName:"p"},"optimize production code")," using ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/CosmWasm/rust-optimizer"},"cosmwasm/rust-optimizer"),".\n",(0,a.kt)("strong",{parentName:"p"},"rust-optimizer")," also produces reproducible builds of cosmwasm smart contracts.\nThis means third parties can verify the contract is the actually the claimed code."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'docker run --rm -v "$(pwd)":/code \\\n  --mount type=volume,source="$(basename "$(pwd)")_cache",target=/code/target \\\n  --mount type=volume,source=registry_cache,target=/usr/local/cargo/registry \\\n  cosmwasm/rust-optimizer:0.11.3\n')))}u.isMDXComponent=!0}}]);